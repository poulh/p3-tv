#!/usr/bin/ruby

require 'p3-tv'
Encoding.default_external = 'UTF-8'

P3::TV::Settings::create_default! unless P3::TV::Settings::exists?

settings = P3::TV::Settings.new

case ARGV[0]
when 'set_tvdb_api_key'
    settings[:tvdb_api_key] = ARGV[1]
when 'settings'
    puts settings.to_h.to_json
when 'set'
   begin
       settings[ ARGV[1] ] = Integer( ARGV[2] )
   rescue
       begin
           settings[ ARGV[1] ] = Float( ARGV[2] )
       rescue
           case ARGV[2]
           when "true"
               settings[ ARGV[1] ] = true
           when "false"
               settings[ ARGV[1] ] = false
           else
               settings[ ARGV[1] ] = ARGV[2] #string
           end
       end
   end
when 'search'
    search = P3::TV::Search.new( settings )
    results = search.find_series( ARGV[1] )
    results = results.collect{|r| r.to_h }
    puts results.to_json
when 'add_series'
    search = P3::TV::Search.new( settings )
    series = search.find_series_by_id( ARGV[1] )
    settings.add_series!( series ) if series
when 'remove_series'
    search = P3::TV::Search.new( settings )
    series = search.find_series_by_id( ARGV[1] )
    settings.remove_series!( series.id ) if series
when 'update_series'
    if( settings[:series].detect{|s| s[:id] == ARGV[1] } ) #only update series that have already been added
        search = P3::TV::Search.new( settings )
        series = search.find_series_by_id( ARGV[1] )
        settings.update_series!( series ) if series
    end
when 'episode_status'
    search = P3::TV::Search.new( settings )
    library = P3::TV::Library.new( settings )
    downloads = P3::TV::Downloads.new( settings )
    files = []
    settings.each_series_episode_file_status( ARGV[1], search, downloads, library ) do | episode_file |
        files << episode_file.to_h
    end
    puts files.to_json
when 'download_missing'
    P3::TV::download_missing_series!( ARGV[1], settings )
when 'catalog_and_downloads'
    downloads = P3::TV::Downloads.new( settings )

    if( downloads.remove_completed_torrents! > 0 )
        P3::TV::catalog_downloads!( settings, downloads )
    end

    files = []
    downloads.each_downloading_file do | episode_file |
        files << episode_file.to_h
    end
    files.sort!{|a,b| b[:percent_done] <=> a[:percent_done] } #highest percent first
    puts files.to_json
when 'catalog_downloads_for_series'
    P3::TV::catalog_downloads_series!( ARGV[1], settings )
when 'catalog_downloads'
    P3::TV::catalog_downloads!( settings )
end
